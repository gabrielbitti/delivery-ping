"""init system

Revision ID: 0001
Revises: 
Create Date: 2025-09-17 21:17:22.046127

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0001'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('customer',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('complete_name', sa.String(length=255), nullable=False),
        sa.Column('nickname', sa.String(length=100), nullable=True),
        sa.Column('cellphone', sa.String(length=20), nullable=False),
        sa.Column('has_whatsapp', sa.Boolean(), nullable=True),
        sa.Column('cpf', sa.String(length=11), nullable=True),
        sa.Column('cnpj', sa.String(length=14), nullable=True),
        sa.Column('email', sa.String(length=255), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        comment='Tabela de clientes do sistema'
    )
    op.create_index('idx_customer_active_name', 'customer', ['is_active', 'complete_name'], unique=False)
    op.create_index(op.f('ix_customer_cnpj'), 'customer', ['cnpj'], unique=True)
    op.create_index(op.f('ix_customer_cpf'), 'customer', ['cpf'], unique=True)
    op.create_index(op.f('ix_customer_email'), 'customer', ['email'], unique=True)
    op.create_table('route',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_route_active', 'route', ['is_active'], unique=False)
    op.create_index(op.f('ix_route_id'), 'route', ['id'], unique=False)
    op.create_table('address',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('customer_id', sa.Integer(), nullable=False),
        sa.Column('complete_address', sa.String(length=500), nullable=False),
        sa.Column('city', sa.String(length=100), nullable=False),
        sa.Column('state', sa.String(length=50), nullable=False),
        sa.Column('country', sa.String(length=50), nullable=True),
        sa.Column('zip_code', sa.String(length=10), nullable=True),
        sa.Column('latitude', sa.Float(), nullable=True),
        sa.Column('longitude', sa.Float(), nullable=True),
        sa.Column('is_primary', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.CheckConstraint('latitude >= -90 AND latitude <= 90', name='valid_latitude'),
        sa.CheckConstraint('longitude >= -180 AND longitude <= 180', name='valid_longitude'),
        sa.ForeignKeyConstraint(['customer_id'], ['customer.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_address_city_customer', 'address', ['city', 'customer_id'], unique=False)
    op.create_index('idx_address_coordinates', 'address', ['latitude', 'longitude'], unique=False)
    op.create_index('idx_one_primary_address', 'address', ['customer_id'], unique=True, postgresql_where=sa.text('is_primary = true'))
    op.create_index(op.f('ix_address_city'), 'address', ['city'], unique=False)
    op.create_table('route_schedule',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('route_id', sa.Integer(), nullable=False),
        sa.Column('status', sa.Enum('PENDING', 'CONFIRMED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', name='routestatus'), nullable=False),
        sa.Column('schedule_date', sa.DateTime(timezone=True), nullable=False),
        sa.Column('finish_date', sa.DateTime(timezone=True), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.CheckConstraint('finish_date IS NULL OR finish_date > schedule_date', name='valid_finish_date'),
        sa.ForeignKeyConstraint(['route_id'], ['route.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_schedule_date_status', 'route_schedule', ['schedule_date', 'status'], unique=False)
    op.create_index(op.f('ix_route_schedule_id'), 'route_schedule', ['id'], unique=False)
    op.create_index(op.f('ix_route_schedule_schedule_date'), 'route_schedule', ['schedule_date'], unique=False)
    op.create_index(op.f('ix_route_schedule_status'), 'route_schedule', ['status'], unique=False)
    op.create_table('notification',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('route_schedule_id', sa.Integer(), nullable=False),
        sa.Column('customer_id', sa.Integer(), nullable=False),
        sa.Column('type', sa.Enum('REMINDER', 'CONFIRMATION', 'CANCELLATION', name='notificationtype'), nullable=False),
        sa.Column('status', sa.Enum('PENDING', 'SENT', 'DELIVERED', 'FAILED', name='notificationstatus'), nullable=False),
        sa.Column('scheduled_date', sa.DateTime(timezone=True), nullable=False),
        sa.Column('sent_date', sa.DateTime(timezone=True), nullable=True),
        sa.Column('message', sa.Text(), nullable=False),
        sa.Column('customer_response', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.CheckConstraint('sent_date IS NULL OR sent_date >= scheduled_date', name='valid_sent_date'),
        sa.ForeignKeyConstraint(['customer_id'], ['customer.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['route_schedule_id'], ['route_schedule.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_notification_pending', 'notification', ['scheduled_date', 'status'], unique=False, postgresql_where="status IN ('pending', 'failed')")
    op.create_index(op.f('ix_notification_scheduled_date'), 'notification', ['scheduled_date'], unique=False)
    op.create_index(op.f('ix_notification_status'), 'notification', ['status'], unique=False)
    op.create_table('route_point',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('route_id', sa.Integer(), nullable=False),
        sa.Column('address_id', sa.Integer(), nullable=False),
        sa.Column('sequence_order', sa.Integer(), nullable=False),
        sa.Column('estimated_time', sa.Integer(), nullable=True),
        sa.Column('distance_to_next', sa.Float(), nullable=True),
        sa.Column('notes', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.CheckConstraint('sequence_order > 0', name='positive_sequence'),
        sa.ForeignKeyConstraint(['address_id'], ['address.id'], ondelete='RESTRICT'),
        sa.ForeignKeyConstraint(['route_id'], ['route.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('route_id', 'address_id', name='uq_route_address'),
        sa.UniqueConstraint('route_id', 'sequence_order', name='uq_route_sequence')
    )
    op.create_index('idx_route_point_composite', 'route_point', ['route_id', 'sequence_order'], unique=False)
    op.create_index(op.f('ix_route_point_id'), 'route_point', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_route_point_id'), table_name='route_point')
    op.drop_index('idx_route_point_composite', table_name='route_point')
    op.drop_table('route_point')
    op.drop_index(op.f('ix_notification_status'), table_name='notification')
    op.drop_index(op.f('ix_notification_scheduled_date'), table_name='notification')
    op.drop_index('idx_notification_pending', table_name='notification', postgresql_where="status IN ('pending', 'failed')")
    op.drop_table('notification')
    op.drop_index(op.f('ix_route_schedule_status'), table_name='route_schedule')
    op.drop_index(op.f('ix_route_schedule_schedule_date'), table_name='route_schedule')
    op.drop_index(op.f('ix_route_schedule_id'), table_name='route_schedule')
    op.drop_index('idx_schedule_date_status', table_name='route_schedule')
    op.drop_table('route_schedule')
    op.drop_index(op.f('ix_address_city'), table_name='address')
    op.drop_index('idx_one_primary_address', table_name='address', postgresql_where=sa.text('is_primary = true'))
    op.drop_index('idx_address_coordinates', table_name='address')
    op.drop_index('idx_address_city_customer', table_name='address')
    op.drop_table('address')
    op.drop_index(op.f('ix_route_id'), table_name='route')
    op.drop_index('idx_route_active', table_name='route')
    op.drop_table('route')
    op.drop_index(op.f('ix_customer_email'), table_name='customer')
    op.drop_index(op.f('ix_customer_cpf'), table_name='customer')
    op.drop_index(op.f('ix_customer_cnpj'), table_name='customer')
    op.drop_index('idx_customer_active_name', table_name='customer')
    op.drop_table('customer')
    # ### end Alembic commands ###
